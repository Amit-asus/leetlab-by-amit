// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum  UserRole {
  admin 
  user 
}

enum difficultyEnum {
  Easy 
  Medium 
  Hard 
}

model User {
  id String @id  @default(uuid())  
  name String?
  email String? @unique
  image String? 
  role UserRole @default(user)
  password String 
  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relationships 
  problems  Problem[]
  submission Submission[]
  problemSolved  ProblemSolved[]
}


model  Problem {
  id String @id  @default(uuid()) 
  tittle  String 
  description String 
  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  difficulty difficultyEnum @default(Easy)
  tags String[]
  userId String 
  example Json 
  constraints String?
  hints String?
  testcases Json 
  codeSnippet Json
  referenceSolution Json 
  solvedBy  ProblemSolved[]
Â 
  //relationship 
  user  User  @relation(fields: [userId] , references: [id] , onDelete: Cascade)
  submission Submission[]
}


model Submission{
  id String @id  @default(uuid()) 
  userId String 
  problemId String 
  sourceCode String 

  language String
  stdin String? 
  stdout String? 
  compileOutput String? 
  status String  //Accepted , wrong answer
  memory String? 
  time String? 


  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relationships
  user  User  @relation(fields: [userId] , references: [id] , onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId] , references: [id] , onDelete: Cascade)
  testCases TestCaseResult[]
}


  //relationships



model TestCaseResult{
  id String @id  @default(uuid()) 
  submissionId String 
  testCase Int 
  passed  Boolean  //Accepted , wrong answer
  stdout String? 
  expected String
  stderr String?
  compileOutput String?
  status String
  memory String?
  time String? 

  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relationships

  submission  Submission  @relation(fields: [submissionId] , references: [id] , onDelete: Cascade)
  @@index([submissionId])
}


model ProblemSolved{
  id String @id  @default(uuid()) 
  userId String 
  problemId String 

  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  // relationships
  user  User  @relation(fields: [userId] , references: [id] , onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId] , references: [id] , onDelete: Cascade)
  @@index([userId,problemId])

  @@unique([userId,problemId])
}

